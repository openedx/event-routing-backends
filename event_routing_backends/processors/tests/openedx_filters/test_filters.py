"""Test cases for the filters file."""

from django.test import TestCase
from mock import Mock, patch
from openedx_filters.tooling import OpenEdxPublicFilter

from event_routing_backends.processors.openedx_filters.exceptions import InvalidFilterType
from event_routing_backends.processors.openedx_filters.filters import ProcessorBaseFilter


class TestProcessorBaseFilter(TestCase):
    """General test cases for the ProcessorBaseFilter class."""

    def test_invalid_configuration(self):
        """This test that the exception XApiInvalidFilterType is raised when
        the filter_type attribute has not been set.

        Expected behavior:
            - InvalidFilterType exception is raised
        """
        self.assertRaises(InvalidFilterType, ProcessorBaseFilter.run_filter, Mock(), "dummy_value")

    @patch.object(OpenEdxPublicFilter, "run_pipeline")
    def test_expected_value(self, run_pipeline_mock):
        """This checks that the method run_filter returns the value generated by
        the parent method `run_pipeline`

        Expected behavior:
            - run_pipeline is called with the right key and value
            - run_filter returns the value of the result key
        """
        transformer = Mock()
        run_pipeline_mock.return_value = {"result": "expected_value"}
        input_value = "dummy_value"
        openedx_filter = ProcessorBaseFilter.generate_dynamic_filter(filter_type="test_filter")

        result = openedx_filter.run_filter(transformer=transformer, result=input_value)

        run_pipeline_mock.assert_called_once_with(transformer=transformer, result=input_value)
        self.assertEqual(run_pipeline_mock()["result"], result)
